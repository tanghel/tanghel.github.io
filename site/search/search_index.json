{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commandssss mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. public static string Test() { Console.WriteLine(\"Hello World!\"); }","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commandssss","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commandssss"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. public static string Test() { Console.WriteLine(\"Hello World!\"); }","title":"Project layout"},{"location":"1.introduction/","text":"Introduction Each \u201ecomplete\u201d module has: a Window Handling Object WHO: specifies the behavior of the controls a BusinessObject busObj: data manipulation; direct access to the dataSet (and dataSet fields) at least one DataSet A Window Handling Object defines the behavior of the window itself and of the controls within it. It is the place where the \u201ecall-to-action\u201d happens, i.e. it can respond to event handlers of any type. It responds to various events triggered by the window or by the controls, it holds references to the controls and can modify their properties at any given time. It does not contain business logic functionality; it delegates the functionality to the Business Object. It is the component that is able to handle exceptions and decide how the exception is handled (show message to user, retry, fail silently, etc.) A Business Object is the part of the program that encodes the real-world business rules that determine how data can be created, stored, and changed . It is contrasted with the remainder of the software that might be concerned with lower-level details of managing a database . It is an executor of commands usually triggered by a Window Handling Object or a parent Business Object. It should not implement events of any type; the responsibility of \u201ecall-to-action\u201d belongs to the Window Handling Object. It does not reference any visual components (WPF); it does not display user-level information. When an unexpected result occurs inside of a function, the best practice would be to throw Exception instead of returning error-value. It should not handle Exceptions in try/catch blocks; in the catch blocks, it should always call \u201ethrow;\u201d after some action is performed such as Logging the error. Uses LoggerSink sparingly (best practice: not at all). Note *: * the code-examples used in section BusinessObject and Window Handling Object are code sequences from Production Feedback-Module (shortcut: PRM )","title":"Introduction"},{"location":"1.introduction/#introduction","text":"Each \u201ecomplete\u201d module has: a Window Handling Object WHO: specifies the behavior of the controls a BusinessObject busObj: data manipulation; direct access to the dataSet (and dataSet fields) at least one DataSet A Window Handling Object defines the behavior of the window itself and of the controls within it. It is the place where the \u201ecall-to-action\u201d happens, i.e. it can respond to event handlers of any type. It responds to various events triggered by the window or by the controls, it holds references to the controls and can modify their properties at any given time. It does not contain business logic functionality; it delegates the functionality to the Business Object. It is the component that is able to handle exceptions and decide how the exception is handled (show message to user, retry, fail silently, etc.) A Business Object is the part of the program that encodes the real-world business rules that determine how data can be created, stored, and changed . It is contrasted with the remainder of the software that might be concerned with lower-level details of managing a database . It is an executor of commands usually triggered by a Window Handling Object or a parent Business Object. It should not implement events of any type; the responsibility of \u201ecall-to-action\u201d belongs to the Window Handling Object. It does not reference any visual components (WPF); it does not display user-level information. When an unexpected result occurs inside of a function, the best practice would be to throw Exception instead of returning error-value. It should not handle Exceptions in try/catch blocks; in the catch blocks, it should always call \u201ethrow;\u201d after some action is performed such as Logging the error. Uses LoggerSink sparingly (best practice: not at all). Note *: * the code-examples used in section BusinessObject and Window Handling Object are code sequences from Production Feedback-Module (shortcut: PRM )","title":"Introduction"},{"location":"2.dataset.definition/","text":"DataSet Definition A DataSet is a data container composed of tables (DataTables) that contain rows (DataRows), uses SQL queries to retrieve that data from the database, tracks changes to each columns and generated update/insert/delete statements transparently when required to write data back into the database. Each DataRow may have one of the following RowStates: New: the row was added to the dataSet and will be ignored on Save EditingNew: the row was already edited and it\u2019s prepared to be saved Modified: an existing row was modified NotModified: an existing row was retrieved from the db Deleted: the row was marked as deleted, will be deleted only at Save None: the row was not added to the collection; the row is detached For updateable DataSets, the tables must be arranged in the same order, in which the primary-key inserts are done. For the Delete operation, the DataSet will do the action in the reverse order.","title":"DataSet Definition"},{"location":"2.dataset.definition/#dataset-definition","text":"A DataSet is a data container composed of tables (DataTables) that contain rows (DataRows), uses SQL queries to retrieve that data from the database, tracks changes to each columns and generated update/insert/delete statements transparently when required to write data back into the database. Each DataRow may have one of the following RowStates: New: the row was added to the dataSet and will be ignored on Save EditingNew: the row was already edited and it\u2019s prepared to be saved Modified: an existing row was modified NotModified: an existing row was retrieved from the db Deleted: the row was marked as deleted, will be deleted only at Save None: the row was not added to the collection; the row is detached For updateable DataSets, the tables must be arranged in the same order, in which the primary-key inserts are done. For the Delete operation, the DataSet will do the action in the reverse order.","title":"DataSet Definition"}]}